showMe(p2(20))
show(p2(2))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
rm(list = ls())
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
library(swirl)
rm(list = ls())
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth("lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth("lm") + facet_grid(formula = .~drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(formula = .~drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Milage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x="Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim = c(-3,3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy = color = factor(year)))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut())
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut, geom = geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints = quantile(diamonds$carat, seq(0, 1, length.out = 4), na.rm = TRUE)
cutpoints = quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints = quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
library(lattice)
xyplot(x = price, y = cut, data = diamonds)
xyplot(x = price, data = diamonds)
mpg
xyplot(x = displ, data = mpg)
xyplot(x = mpg$displ, data = mpg)
xyplot(displ ~ hwy, data = mpg)
lg <- xyplot(displ ~ hwy, data = mpg)
class(lg)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
print(g)
movies
summary(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(budget, rating, data = movies) + geom_smooth()
qplot(budget, rating, data = movies) + geom_smooth(method = "lm")
rm(list = ls())
rep(1:3, each = 4)
rep(1:3)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
y
plot(x, y, col = "blur", pch = 19)
plot(x, y, col = "blue", pch = 19)
df <- data.frame(x, y)
dist(df)
swirl()
library(swirl)
rm(list = ls())
swirl()
sub1 <- subset(sdd, subject = 1)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,:12])
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist(sub1[,1:3])
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplcust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[10:12], maxCon))
mdist <- dist(cbind(sub1[10:12], maxCon))
mdist <- dist((sub1[,c(10:12], maxCon))
mdist <- dist((sub1[,c(10:12, maxCon)])
]
mdist <- dist((sub1[,c([10:12, maxCon)])
mdist <- dist(sub1[,c([10:12, maxCon)])
mdist <- dist(sub1[,c([10:12, maxCon]))
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562:563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kkClust$size==29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
rm(list = ls())
setwd("RepData_PeerAssessment1/")
unz("./activity.zip", "./activity.csv")
unzip("./activity.zip")
read.csv("./activity.csv")
df <- read.csv("./activity.csv")
names(df)
str(df)
summary(df)
dim(df)
names(df)
mutate
library(dplyr)
libaray(lubridate)
library(lubridate)
ymd("2016-06-16")
class(ymd("2016-06-16"))
df
tbl_df(df)
activityDF <- tbl_df(df)
activityDF
mutate(activityDF, date = ymd(as.character(date)))
activityDF
summarise(group_by(activityDF, date), sum(steps))
summarise(group_by(activityDF, date), sum_steps = sum(steps))
library(ggplot2)
gplot(sumByDay$sum_steps, geom="histogram")
sumByDay <- summarise(group_by(activityDF, date), sum_steps = sum(steps))
library(ggplot2)
qplot(sumByDay$sum_steps, geom="histogram")
sumByDay <- summarise(group_by(activityDF, date), sum_steps = sum(steps))
library(ggplot2)
ggplot(data=sumByDay, aes(sumByDay$sum_steps), xlab = "Sum of Steps per Day") + geom_histogram()
sumByDay <- summarise(group_by(activityDF, date), sum_steps = sum(steps))
library(ggplot2)
qplot(sumByDay$sum_steps, geom="histogram", xlab = "Sum of Steps per day")
mean(sumByDay$sum_steps)
mean(sumByDay$sum_steps, na.rm = TRUE)
median(sumByDay$sum_steps, na.rm = TRUE)
meanSumByDay <- mean(sumByDay$sum_steps, na.rm = TRUE)
meanSumByDay
round(meanSumByDay, digits = 4)
round(meanSumByDay, digits = 2)
library(broman)
names(activityDF)
avgInterval <- summarise(group_by(activityDF, interval), avg_interval = avg(steps))
avgInterval <- summarise(group_by(activityDF, interval), avg_interval = mean(steps))
avgInterval
summary(avgInterval)
avgInterval <- summarise(group_by(activityDF, interval), avg_interval = mean(steps, na.rm = TRUE))
summary(avgInterval)
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval))
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval)) + geom_line()
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval), xlab = "Interval", ylab = "Avg Steps in each day") + geom_line()
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval), xlab = "Interval", ylab = "Avg Steps in each day") + geom_line() + geom_label(xlab = "asdf")
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval), xlab = "Interval", ylab = "Avg Steps in each day") + geom_line()
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval, xlab = "Interval", ylab = "Avg Steps in each day")) + geom_line()
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval, xlab = "Interval")) + geom_line() + ylab("Avg Steps in each day")
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval)) + geom_line() + ylab("Avg Steps in each day") + xlab("Interval")
ggplot(avgInterval, aes(avgInterval$interval, avgInterval$avg_interval)) + geom_line() + ylab("Avg Steps in each day") + xlab("Interval") + ggtitle("Avarage steps in each interval across days")
sumByDay <- summarise(group_by(activityDF, date), sum_steps = sum(steps))
ggplot(sumByDay, aes(sum_steps))
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count")
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + geom_histogram()
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + geom_histogram(bins = 10)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + geom_histogram(bins = 100)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + geom_histogram(bins = 20)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + gtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20)
meanSumByDay <- mean(sumByDay$sum_steps, na.rm = TRUE)
medianSumByDay <- median(sumByDay$sum_steps, na.rm = TRUE)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20)
meanSumByDay <- mean(sumByDay$sum_steps, na.rm = TRUE)
medianSumByDay <- median(sumByDay$sum_steps, na.rm = TRUE)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20) + geom_vline(meanSumByDay)
meanSumByDay <- mean(sumByDay$sum_steps, na.rm = TRUE)
medianSumByDay <- median(sumByDay$sum_steps, na.rm = TRUE)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20) + geom_vline(aes(meanSumByDay))
meanSumByDay <- mean(sumByDay$sum_steps, na.rm = TRUE)
medianSumByDay <- median(sumByDay$sum_steps, na.rm = TRUE)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20) + geom_vline(aes(meanSumByDay))
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20) + geom_vline(xintercept = meanSumByDay)
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20) + geom_vline(xintercept = meanSumByDay, col = "Green")
ggplot(sumByDay, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day") + geom_histogram(bins = 20) + geom_vline(xintercept = meanSumByDay, col = "Green") + geom_vline(xintercept = medianSumByDay, col = "Blue")
install.packages("mice")
table(activityDF$steps)
table(is.na(activityDF$steps))
mean(is.na(activityDF$steps))
na_table <- table(is.na(activityDF$steps))
print(na_table)
mean_na <- mean(is.na(activityDF$steps))
print(na_table)
We have `r na_table[2]` missing values
We have `r na_table[2]` missing values out of `r length(activityDF$steps)` (`r sprintf("%.2f", mean_na * 100)`%)
activityDF
aggregate(steps ~ date, data = activityDF, function(x) { sum(is.na(x)) }, na.action = NULL)
8 * 288
na_by_day <- filter(aggregate(steps ~ date, data = activityDF, function(x) { sum(is.na(x)) }, na.action = NULL), steps > 0)
na_by_day
print(na_by_interval)
activityDF.na <- filter(activityDF, is.na(steps))
activityDF.na
data.frame(table(activityDF.na$date, activityDF.na$interval))
data.frame(table(activityDF.na$date, activityDF.na$interval)[,])
na_matrix <- data.frame(table(activityDF.na$date, activityDF.na$interval)[,])
image(na_matrix)
image(z = na_matrix)
image(z = as.matrix(na_matrix))
image(as.matrix(na_matrix))
table(activityDF.na$date, activityDF.na$interval)
activityDF.na
head(activityDF.na, 10
head(activityDF.na, 10)
head(activityDF.na, 10)
head(activityDF.na, 50)
table(activityDF.na$date)
activityDF.na <- mutate(activityDF.na, date = ymd(as.character(date)))
table(activityDF.na$date)
data.frame(table(activityDF.na$date, activityDF.na$interval)[,])
na_df <- data.frame(table(activityDF.na$date, activityDF.na$interval)[,])
dim(na_df)
dim(na_df)[1]
dim(na_df)[2]
288 * 5
1440 / 60
dim(activityDF)
dim(filter(activityDF, date == "2012-10-01")
)
dim(filter(activityDF, date == "2012-10-02"))
dim(filter(activityDF, date == "2012-10-12"))
head(format(activityDF$date, "%U"))
head(format(activityDF$date + 3, "%U"))
activityDF <- mutate(activityDF, date = ymd(as.character(date))))
activityDF <- mutate(activityDF, date = ymd(as.character(date)))
activityDF
head(format(activityDF$date + 3, "%U"))
head(format(activityDF$date + 3, "%U"), n = 20)
head(format(activityDF$date + 3, "%U"), n = 200)
table(format(activityDF$date + 3, "%U"))
table(format(activityDF$date, "%U"))
table(as.numeric(format(activityDF$date, "%U")))
table(as.numeric(format(activityDF$date, "%W")))
table(as.numeric(strftime(activityDF$date, "%W")))
as.numeric(strftime(ymd("2016-01-01"), "%W"))
as.numeric(strftime(ymd("2016-01-02"), "%W"))
as.numeric(strftime(ymd("2016-01-07"), "%W"))
as.numeric(strftime(ymd("2016-01-06"), "%W"))
as.numeric(strftime(ymd("2016-01-03"), "%W"))
as.numeric(strftime(ymd("2016-01-04"), "%W"))
as.numeric(strftime(ymd("2016-01-10"), "%W"))
as.numeric(strftime(ymd("2016-01-11"), "%W"))
activityDF <- mutate(activityDF, week = as.numeric(strftime(activityDF$date, "%W")))
activityDF
avgInterval
tapply(activityDF, activityDF$week, summarise(group_by(activityDF, interval), avg_interval = mean(steps, na.rm = TRUE))
)
tapply(activityDF, activityDF$week, func = function(x) { summarise(group_by(x, interval), avg_interval = mean(steps, na.rm = TRUE)) })
)
tapply(activityDF, activityDF$week, func = function(x) { summarise(group_by(x, interval), avg_interval = mean(steps, na.rm = TRUE)) })
split(x = activityDF, f = activityDF$week)
lapply(split(x = activityDF, f = activityDF$week), mean(steps))
apply(split(x = activityDF, f = activityDF$week), FUN = function(x) {})
apply(split(x = activityDF, f = activityDF$week), FUN = function(x) { 7 })
apply(split(x = activityDF, f = activityDF$week), FUN = function(df) { summarise(group_by(df, interval), avg_interval = mean(steps, na.rm = TRUE)) })
aggregate(formula = steps ~ week + interval, data = activityDF)
aggregate(formula = steps ~ week + interval, data = activityDF, FUN = mean)
aggregate(formula = steps ~ week + interval, data = activityDF, FUN = mean, na.rm = TRUE)
for (i in 1:nrow(activityDF)) {
print(df[i, "date"])
}
activityDF
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, steps])) {
avgStepsByWeekAndInterval <- aggregate(formula = steps ~ week + interval, data = activityDF, FUN = mean, na.rm = TRUE)
activityDF[i, steps] <- avgSt
}
}
}
avgStepsByWeekAndInterval <- aggregate(formula = steps ~ week + interval, data = activityDF, FUN = mean, na.rm = TRUE)
avgStepsByWeekAndInterval
head(avgStepsByWeekAndInterval)
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, steps])) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
activityDF[i, steps] <- filter(avgStepsByWeekAndInterval, week == week_no & interval == interval_no)$steps
}
}
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, steps])) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
}
}
activityDF
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, 'steps'])) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
}
}
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, "steps"])) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
}
}
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, "steps"])) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
print(week_no)
}
}
for (i in 1:nrow(activityDF)) {
if(is.na(activityDF[i, ]$steps)) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
print(week_no)
}
}
for (i in 1:nrow(activityDF)) {
week_no <- activityDF[i, week]
interval_no <- activityDF[i, interval]
print(week_no)
}
for (i in 1:nrow(activityDF)) {
week_no <- activityDF[i, ]$week
interval_no <- activityDF[i, ]$interval
print(week_no)
}
assign(activityDF.full, activityDF)
assign("activityDF.full", activityDF)
activityDF.full
assign("activityDF.full", activityDF)
for (i in 1:nrow(activityDF.full)) {
if(is.na(activityDF.full[i, ]$steps)) {
week_no <- activityDF.full[i, ]$week
interval_no <- activityDF.full[i, ]$interval
activityDF.full[i, ]$steps <- filter(avgStepsByWeekAndInterval, week = week_no & interval == interval_no)$steps
}
}
assign("activityDF.full", activityDF)
for (i in 1:nrow(activityDF.full)) {
if(is.na(activityDF.full[i, ]$steps)) {
week_no <- activityDF.full[i, ]$week
interval_no <- activityDF.full[i, ]$interval
activityDF.full[i, ]$steps <- filter(avgStepsByWeekAndInterval, week = week_no & interval == interval_no)$steps
}
}
for (i in 1:nrow(activityDF.full)) {
if(is.na(activityDF.full[i, ]$steps)) {
week_no <- activityDF.full[i, ]$week
interval_no <- activityDF.full[i, ]$interval
print(filter(avgStepsByWeekAndInterval, week = week_no & interval == interval_no)$steps)
}
}
avgStepsByWeekAndInterval
for (i in 1:nrow(activityDF.full)) {
if(is.na(activityDF.full[i, ]$steps)) {
week_no <- activityDF.full[i, ]$week
interval_no <- activityDF.full[i, ]$interval
print(filter(avgStepsByWeekAndInterval, week = week_no && interval == interval_no)$steps)
}
}
filter(avgStepsByWeekAndInterval, week == 40)
filter(avgStepsByWeekAndInterval, week == 40 & interval == 55)
filter(avgStepsByWeekAndInterval, week == 40 & interval == 55)$steps
for (i in 1:nrow(activityDF.full)) {
if(is.na(activityDF.full[i, ]$steps)) {
week_no <- activityDF.full[i, ]$week
interval_no <- activityDF.full[i, ]$interval
print(week_no)
}
}
for (i in 1:nrow(activityDF.full)) {
if(is.na(activityDF.full[i, ]$steps)) {
week_no <- activityDF.full[i, ]$week
interval_no <- activityDF.full[i, ]$interval
print(paste(week_no, interval_no))
}
}
activityDF.na <- filter(activityDF.full, is.na(steps))
activityDF.na
merge(x = activityDF.na, y = avgStepsByWeekAndInterval, by = c("interval", "week"))
joined <- merge(x = activityDF.na, y = avgStepsByWeekAndInterval, by = c("interval", "week"))
joined
head(joined)
avgStepsByWeekAndInterval
head(avgStepsByWeekAndInterval)
head(joined)
activityDF.joined <- merge(x = activityDF.full, y = joined, by = c("week", "interval", "date"), all.x = TRUE, all.y = FALSE)
head(activityDF.joined)
joined <- merge(x = activityDF.full, y = avgStepsByWeekAndInterval, by = c("interval", "week"))
head(joined)
joined
activityDF.full <- tbl_df(joined)
activityDF.full
activityDF.full2 <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x))
activityDF.full2
activityDF.full2 <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x)) %>% select(c("date", "week", "interval", "steps"))
activityDF.full2 <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x)) %>% select(one_of(c("date", "week", "interval", "steps")))
activityDF.full2
activityDF.full2 <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x)) %>% select(one_of(c("date", "week", "interval", "steps"))) %>% order(date, interval)
activityDF.full2 <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x)) %>% select(one_of(c("date", "week", "interval", "steps"))) %>% arrange(week, date, interval)
activityDF.full2
activityDF.full <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x)) %>% select(one_of(c("date", "week", "interval", "steps"))) %>% arrange(week, date, interval)
activityDF.full <- mutate(activityDF.full, week = week, interval = interval, steps = ifelse(test = is.na(steps.x), steps.y, steps.x)) %>% select(one_of(c("date", "week", "interval", "steps"))) %>% arrange(week, date, interval)
sumByDay.full <- summarise(group_by(activityDF.full, date), sum_steps = sum(steps))
meanSumByDay.full <- mean(sumByDay$sum_steps, na.rm = TRUE)
medianSumByDay.full <- median(sumByDay$sum_steps, na.rm = TRUE)
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue")
sumByDay.full <- summarise(group_by(activityDF.full, date), sum_steps = sum(steps))
meanSumByDay.full <- mean(sumByDay.full$sum_steps, na.rm = TRUE)
medianSumByDay.full <- median(sumByDay.full$sum_steps, na.rm = TRUE)
ggplot(sumByDay.full, aes(sum_steps.full)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue")
sumByDay.full <- summarise(group_by(activityDF.full, date), sum_steps = sum(steps))
meanSumByDay.full <- mean(sumByDay$sum_steps, na.rm = TRUE)
medianSumByDay.full <- median(sumByDay$sum_steps, na.rm = TRUE)
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue")
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay$sum_steps, bins = 20, outline = "red")
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, outline = "red")
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, border = "red")
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, col=I("red"), alpha = .2)
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, col=I("red"), alpha = .2)
+ legend
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, col=I("red"), alpha = .2)
+ scale_color_discrete()
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, col=I("red"), alpha = .2)
+ scale_colour_discrete(name = "Mode", breaks = c("With NA", "Imputed"))
ggplot(sumByDay.full, aes(sum_steps)) + xlab("Total Number of Steps in a day") + ylab("Count") + ggtitle("Histogram of Total number of Steps in a Day (imputed)") + geom_histogram(bins = 20, fill = "blue") + geom_histogram(data = sumByDay, mapping = aes(sum_steps), bins = 20, col=I("red"), alpha = .2)
+ scale_colour_manual("Legend title", values = c("red", "blue"))
